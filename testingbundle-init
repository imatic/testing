#!/usr/bin/env php
<?php
define('ROOT_DIR', __DIR__ . '/../../..');
define('BUNDLE_NAME_HOLDER', 'TestsTemplate');
define('TESTS_DIR', ROOT_DIR . '/Tests');
define('TEST_PROJECT_ROOT_DIR', TESTS_DIR . '/Fixtures/TestProject');
define('TEMPLATES_DIR', ROOT_DIR . '/vendor/imatic/testing-bundle/Resources/skeleton/TestsTemplate');

require ROOT_DIR . '/vendor/autoload.php';

use Symfony\Component\Filesystem\Filesystem;

$fs = new FileSystem();
$fs->mirror(TEMPLATES_DIR, TESTS_DIR);
removeGitKeepFiles(TESTS_DIR);

$bundleName = getBundleName();
updateTemplateFiles(TESTS_DIR);
makeCacheAndLogDirs();
updateGitignore();

function removeGitKeepFiles($path)
{
    global $fs;

    $files = array_filter(scandir($path), function($fileName) {
        return !in_array($fileName, ['.', '..']);
    });

    foreach ($files as $fileName) {
        $filePath = filePath($path, $fileName);
        if (is_dir($filePath)) {
            removeGitKeepFiles($filePath);
        } elseif ($fileName === '.gitkeep') {
            $fs->remove($filePath);
        }
    }
}

function updateTemplateFiles($path)
{
    global $fs, $bundleName;

    $newFiles = array_filter(scandir($path), function($fileName) {
        return strpos($fileName, '.') !== 0;
    });

    foreach ($newFiles as $fileName) {
        $filePath = filePath($path, $fileName);

        if (is_dir($filePath)) {
            updateTemplateFiles($filePath);
        } elseif (is_file($filePath)) {
            updateFileContent($filePath, $fileName);
        }

        if (strpos($fileName, BUNDLE_NAME_HOLDER) !== false) {
            $newFileName = str_replace(BUNDLE_NAME_HOLDER, $bundleName, $fileName);
            $fs->rename($filePath, filePath($path, $newFileName));
        }
    }
}

function updateFileContent($filePath, $fileName)
{
    global $bundleName;

    $fileContent = file_get_contents($filePath);
    $fileContent = str_replace(BUNDLE_NAME_HOLDER, $bundleName, $fileContent);
    $fileContent = str_replace(camelToSnake(BUNDLE_NAME_HOLDER), camelToSnake($bundleName), $fileContent);

    file_put_contents($filePath, $fileContent);
}

function makeCacheAndLogDirs()
{
    global $fs;

    $files = [
        filePath(TEST_PROJECT_ROOT_DIR, 'cache'),
        filePath(TEST_PROJECT_ROOT_DIR, 'logs'),
    ];
    $fs->mkdir($files);
    $fs->chmod($files, 0777);
}

function getBundleName()
{
    $rootFiles = scandir(ROOT_DIR);
    $bundleFiles = array_filter($rootFiles, function($fileName) {
        return preg_match('/Bundle.php$/', $fileName);
    });

    if (count($bundleFiles) !== 1) {
        throw new \RuntimeException('Exactly one file "/^.*Bundle.php$/" not found in your project root!');
    }

    return str_replace('Imatic', '', str_replace('Bundle.php', '', reset($bundleFiles)));
}

function filePath($path, $file)
{
    return $path . '/' . $file;
}

function camelToSnake($string)
{
    return strtolower(preg_replace('/([a-z])([A-Z])/', '$1_$2', $string));
}

function updateGitignore()
{
    $gitignoreAppend = <<<END
Tests/Fixtures/TestProject/web/bundles
Tests/Fixtures/TestProject/cache
Tests/Fixtures/TestProject/logs
Tests/Fixtures/TestProject/ProjectBundle/DataFixtures
Tests/Fixtures/TestProject/ProjectBundle/Entity
END;

    global $fs;

    $gitignorePath = filePath(ROOT_DIR, '.gitignore');
    
    if (!$fs->exists($gitignorePath)) {
        $fs->touch($gitignorePath);
    }

    $originalContent = file_get_contents($gitignorePath);
    file_put_contents($gitignorePath, $originalContent . $gitignoreAppend);
}
